@using PinnaFace.Core.Enumerations
@model IEnumerable<PinnaFace.Core.Models.ComplainDTO>
<div id="table_id">
    <div id="spinner">
    </div>

    @*<div>
        <span>@ViewData["ItemSearch"]</span>
    </div>*@
    
    <div class="alert alert-info fade in @ViewData["ItemSearchHidden"]">
        <button type="button" class="close" data-dismiss="alert">×</button>
        @MvcHtmlString.Create(@ViewData["ItemSearch"].ToString())
    </div>

    <div>
        <h4 style="margin-top: 3px;">@ViewData["ComplainStatusHeader"] Complains</h4> 
        <p> (@ViewData["totalNumber"]) Complains(s) found</p>
    </div>

    <table class="table table-striped table-condensed table-hover " id="table_id2">

        <tr>
            <th>@Html.DisplayNameFor(model => model.SerialNumber)
            </th>
            @*<th>Number
            </th>*@
            <th>Employee Name
            </th>
            <th>Sponsor Name
            </th>
           @* <th>Sponsor Mobile
            </th>*@
            <th>Days Passed
            </th>
            <th>@Html.DisplayNameFor(model => model.Type)
            </th>
            <th>@Html.DisplayNameFor(model => model.Status)
            </th>
           
            <th style="text-align: center; width: 350px;" class="hidden-print"></th>
        </tr>

        <tbody>
            @foreach (var complainDTO in Model)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => complainDTO.SerialNumber)
                    </td>
                   @* <td>
                       @Html.ActionLink(@Html.DisplayFor(modelItem => complainDTO.ComplainNumber).ToString(), "Details", "Complain", 
                         new { compId = complainDTO.Id },null)
                        
                    </td>*@
                    <td>
                        @Html.ActionLink(@Html.DisplayFor(modelItem => complainDTO.Employee.FirstName).ToString(), "Details", "Employee", 
                         new { empId = complainDTO.Employee.IdEncrypted },null)
                      
                    </td>
                    <td>
                         @Html.ActionLink(@Html.DisplayFor(modelItem => complainDTO.Employee.Visa.SponsorFullNameShort).ToString(), "Details", "Visa", 
                         new { visaId = complainDTO.Employee.Visa.IdEncrypted },null)
                    
                    </td>
                     @*  <td>
                        @Html.DisplayFor(modelItem => complainDTO.Employee.Visa.Sponsor.Address.Mobile)
                    </td>*@
                    <td style="text-align: center;font-weight: bolder">
                        @Html.DisplayFor(modelItem => complainDTO.DaysPassed)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => complainDTO.ComplainTypeDescription)
                    </td>
                         <td>
                        @Html.DisplayFor(modelItem => complainDTO.Status)
                    </td>
       
                    <td style="text-align: center;" class="hidden-print hidden-phone">
                        @Html.ActionLink("View", "Details", "Complain", new { compId = complainDTO.IdEncrypted }, new { @Class = "btn btn-info btn-small" })
@*                        *@
                        @switch (complainDTO.Status)
                        {
                            case ComplainStatusTypes.OnProcess:
                            case ComplainStatusTypes.ReOpened:
                            case ComplainStatusTypes.Opened:
                                @Html.ActionLink("Edit", "Edit", "Complain", new {compId = complainDTO.IdEncrypted}, new {@Class = "btn btn-primary btn-small",@style="margin-right: 5px;"})
                                @Html.ActionLink("Add Remark", "AddRemark", "Complain", new { compId = complainDTO.IdEncrypted }, new { @Class = "btn btn-warning btn-small",@style="margin-right: 5px;" })
                                @Html.ActionLink("Close", "CloseComplain", "Complain", new {compId = complainDTO.IdEncrypted}, new {@Class = "btn btn-danger btn-small"})
                                break;
                            case ComplainStatusTypes.Confirmed:
                                @Html.ActionLink("Delete", "Delete", "Complain", new {compId = complainDTO.IdEncrypted}, new {@Class = "btn btn-danger btn-small"})
                                break;
                            case ComplainStatusTypes.Closed:
                                @Html.ActionLink("Confirm", "Confirm", "Complain", new {compId = complainDTO.IdEncrypted}, new {@Class = "btn btn-success btn-small",@style="margin-right: 5px;"})
                                @Html.ActionLink("Re-Open", "ReOpen", "Complain", new {compId = complainDTO.IdEncrypted}, new {@Class = "btn btn-warning btn-small"})
                                break;
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
    
    <ul class="pager">
        <li style="display:@ViewData["prevDisabled"]; " class="hidden-print">
            @Ajax.ActionLink("← Previous", "Index", "Complain",
                new
                {
                    processStatusId = @ViewData["processStatusId"],
                    searchText = @ViewData["SearchText"],
                    page = @ViewData["Page"],
                    pageSize = @ViewData["PageSize"],
                    ptype = -1,
                    categoryId = @ViewData["CategoryId"],
                    filterByQuantity = @ViewData["FilterByQuantity"]
                }, new AjaxOptions
                {
                    HttpMethod = "GET",
                    InsertionMode = InsertionMode.Replace,
                    UpdateTargetId = "table_id",
                    LoadingElementId = "spinner"
                })
        </li>

        <li>
            <span>Page @ViewData["Page"] of @ViewData["totalPages"] </span>
        </li>

        <li style="display:@ViewData["nextDisabled"]; " class="hidden-print">
            @Ajax.ActionLink("Next →", "Index", "Complain",
                new
                {
                    processStatusId = @ViewData["processStatusId"],
                    searchText = @ViewData["SearchText"],
                    page = @ViewData["Page"],
                    pageSize = @ViewData["PageSize"],
                    ptype = 1,
                    categoryId = @ViewData["CategoryId"],
                    filterByQuantity = @ViewData["FilterByQuantity"]
                }, new AjaxOptions
                {
                    HttpMethod = "GET",
                    InsertionMode = InsertionMode.Replace,
                    UpdateTargetId = "table_id",
                    LoadingElementId = "spinner"
                }, new { @style = "width: 106px;" })
        </li>
    </ul>

</div>
